---
title: "Team Daniel - Creating a Leaf Area Predictive Model"
author: "Aya Miller, Monique Lush, Will Wright, Peta Smit-Colbran, Lizzy Raphaels"
output: html_document
---

# Loading packages, libraries and AusTraits data file

```{r}
#install.packages("austraits")
#install.packages("tidyverse")
#install.packages("plotly")
#install.packages("ranger")

library(tidyverse)
library(austraits)
library(plotly)
library(ranger)

austraits <- readRDS('austraits-0e1c08b0.rds')
data <- austraits$traits 
```

# Creating subsets

## Trait data

Creating a data frame of leaf area, leaf length, leaf width and plant height, averaging each trait by species and pivoting it wider so that each trait has a column

```{r}
 LWAH <- data %>%
   select(taxon_name, trait_name, value) %>%
   filter(trait_name %in% c('leaf_area', 'leaf_length', 'leaf_width', 'plant_height')) %>% 
   mutate(value = as.numeric(value)) %>% # ensuring values are in numeric form
   group_by(taxon_name, trait_name) %>% 
   summarise(avg_value = mean(value), .groups = 'drop') %>%
   pivot_wider(names_from = trait_name, values_from = avg_value) %>%
   na.omit()
```

Creating a function that extracts the most frequently recorded observation per species of categorical trait variables

```{r}
most_frequent_character <- function(column_data) {
  if (!is.vector(column_data) || !all(is.character(column_data))){
    stop('input must be a vector of characters.')
  }
  char_counts <- table(column_data)
  max_counts <- max(char_counts)
  most_frequent_char <- names(char_counts[char_counts==max_counts])
  return(most_frequent_char[1])  #first value 
}
```

Creating a data frame with the categorical variables of interest and pivoting wider so that each trait has a column

```{r}
high_coverage_cat <- data %>%
  select(taxon_name, trait_name, value) %>% 
  filter(trait_name %in% c('plant_growth_form', 'woodiness_detailed','life_history','leaf_shape')) %>%
  group_by(taxon_name, trait_name) %>%
  summarise(value=most_frequent_character(value), .groups = 'drop') %>%
  pivot_wider(names_from = trait_name, values_from = value)
```

## Family Data

```{r}
family_data <- austraits$taxa %>% select(taxon_name, family)
```

Joining numerical, categorical, and family variables together

```{r}
lwa_subset <- left_join(LWAH, high_coverage_cat, by="taxon_name") %>% 
  distinct(taxon_name, .keep_all = TRUE)

lwa_subset <- left_join(lwa_subset, family_data, by="taxon_name") %>% 
  distinct(taxon_name, .keep_all = TRUE) %>% 
  rename('fam'='family') %>%
  mutate(LxW = leaf_length*leaf_width) %>%
  na.omit

fmaily_counts <- table(lwa_subset$fam)
print(fmaily_counts)
# Assuming you have a data frame named 'df' with a column 'column_name'
result_frequencies <- prop.table(table(df$column_name))

# Print the result_frequencies
print(result_frequencies)
# Assuming you have a data frame named 'df' with a column 'column_name'
result_counts <- table(df$column_name)

# Print the result_counts
print(result_counts)

```

# Data Cleansing

## Base Plot Command

Creating plots that visualise the data against a 1:1 line and comparing the 1:1 line with a linear model.

```{r}
# main plotting command with 1:1 line
ggplot(lwa_subset, aes(LxW, leaf_area))+ 
  geom_point()+ 
  ggtitle("Relationship between Leaf Area and Length and Width")+
  scale_x_log10()+ 
  scale_y_log10()+ 
  xlab('Log of Length x Width') + 
  ylab('Log of Leaf Area')+ 
  theme_classic()+
  geom_abline(intercept=0, slope=1, col='red')

# plotting linear model
ggplot(lwa_subset, aes(LxW, leaf_area)) + geom_point()+ 
  geom_smooth(method='lm', col='blue')+ #adds abline from the linear model 
  annotate('text', x=1, y=1e5, label='R2=0.76525')+ 
  annotate('text', x=1, y=17500, label='p<2.2e6')+ 
  ggtitle("Relationship between Leaf Area and Leaf Length and Width")+
  scale_x_log10()+ 
  scale_y_log10()+ 
  xlab('log of leaf length x leaf width') + 
  ylab('log of leaf area')+ 
  geom_abline(intercept=0, slope=1, col='red')+
  theme_classic() +
```

## Linear Model Area ~ LxW and Residuals + Interactive Plot

```{r}
lwa_model <- lm(log(leaf_area) ~ log(LxW), lwa_subset) 

# normalizing the mean and residuals 
std.resid <- (lwa_model$residuals - mean(lwa_model$residuals))/sd(lwa_model$residuals)

# plotting the standardized residuals 
plot(std.resid) 
hist(std.resid)

# put residuals into the dataset 
lwa_subset$residuals <- std.resid

# outlier species with residuals 2 standard deviations away from the mean
outliers <- lwa_subset %>% filter (residuals > 2| residuals < -2)

# to take out these species if necessary 
lwa_subset_trimmed <- lwa_subset %>% filter (residuals < 2 & residuals > -2)

# interactive plot to look at outlier species
p <- ggplot(lwa_subset, aes(LxW, leaf_area, label=taxon_name)) + 
  geom_point()+ 
  ggtitle("Species Residuals >2 or <-2")+ 
  scale_x_log10()+ scale_y_log10()+ 
  xlab('log of leaf length x leaf width') + ylab('log of leaf area')+ geom_abline(intercept=0, slope=1, col='red')+ 
  geom_point(data=lwa_subset 
             %>% filter(taxon_name %in% outliers$taxon_name), col='orange')+ 
  theme_classic() 
ggplotly()
```

## Plotting outliers

### Example: Acacia baileyana and Fabaceae Family

```{r}
ggplot(lwa_subset, aes(LxW, leaf_area)) + 
  geom_point()+ 
  ggtitle("Relationship between Leaf Area and Leaf Length and Width\n Acacia")+
  scale_x_log10()+ 
  scale_y_log10()+ 
  xlab('log of leaf length x leaf width') + 
  ylab('log of leaf area')+ 
  geom_abline(intercept=0, slope=1, col='red')+ 
  theme_classic()+
  geom_point(data=lwa_subset %>% 
               filter(grepl('Fabaceae', fam)), col='orange')+ geom_point(data=lwa_subset %>% filter(taxon_name=='Acacia baileyana'), col='green')

#view all observations of this species; let us know that there might be a difference between how they measured area and length/width data %>% filter(taxon_name == 'Acacia baileyana', trait_name %in% c('leaf_length', 'leaf_width', 'leaf_area')) %>% view() #A.baileyana is a species with compound leaves where it looks like the soruce measured the leaflet for leaf width/length and the entire leaf for leaf area.

austraits$sources[["Maslin_2012"]]
```

### Compound vs. simple leaf plots

```{r}
 #a dataframe with taxon name and leaf compoundness value per species 
compound_avg <- data %>% 
  select(taxon_name, trait_name, value) %>% 
  filter(trait_name == 'leaf_compoundness') %>% 
  select(taxon_name, value ) 
colnames(compound_avg) <-c('taxon_name', 'leaf_compoundness')

#joining the leaf compoundness values to the lwa subset dataframe 
lwa_subset <- left_join(lwa_subset, compound_avg, by = "taxon_name") %>% 
  distinct(taxon_name, .keep_all = TRUE)

#Plotting Area vs LW highlighting compound leaves 
ggplot(lwa_subset, aes(LxW, leaf_area)) + geom_point()+
  ggtitle("Leaf Area vs LxW + Compound")+ 
  scale_x_log10()+ 
  scale_y_log10()+ 
  xlab('log of leaf length x leaf width') + 
  ylab('log of leaf area')+ 
  geom_abline(intercept=0, slope=1, col='red')+ 
  geom_point(data=lwa_subset %>% filter(leaf_compoundness=='compound'), col='orange')+ theme_classic()

#plotting Area vs. LW highlighting simple leaves 
ggplot(lwa_subset, aes(LxW, leaf_area)) + 
  geom_point()+ 
  ggtitle("Leaf Area vs LxW + Simple")+
  scale_x_log10()+ 
  scale_y_log10()+ 
  xlab('log of leaf length x leaf width') + 
  ylab('log of leaf area')+ 
  geom_abline(intercept=0, slope=1, col='red')+
  geom_point(data=lwa_subset %>% filter(leaf_compoundness=='simple'), col='orange')+ 
  theme_classic()
```

### Families

Create a loop to make a plot for each family highlighting species in the family

```{r}
#distinct family names 
distinct_families <- unique(lwa_subset$fam)

#folder path to save plots
folder_path <- '/Users/ayamiller/Desktop/UNSW/term2/BEES3041/Austraits_Project/FamilyPlots' 
dir.create(folder_path, showWarnings = FALSE)

#a loop to make a plot highlighting each family over the LWA subset? 
for(family in distinct_families){ 
  p<-ggplot(lwa_subset, aes(LxW, leaf_area))+ 
    geom_point()+ 
    ggtitle(paste('Area vs. LxW +',family))+ 
    scale_x_log10()+ 
    scale_y_log10()+
    xlab('log of leaf length x leaf width') + 
    ylab('log of leaf area')+
    theme_classic()+ 
    geom_abline(intercept=0, slope=1, col='red')+
    geom_point(data=lwa_subset %>% filter(fam==family), col='orange') 
  
file_name <- paste0(folder_path, '/', family, '_plot.png') 
ggsave(file_name, p, width=3, height=2) }
```

### Interactive Family Plot

```{r}
p <- ggplot(lwa_subset, aes(LxW, leaf_area, label=fam)) + 
  geom_point()+ 
  ggtitle("Leaf Area vs LxW + Compound")+ 
  scale_x_log10()+ 
  scale_y_log10()+
  xlab('log of leaf length x leaf width') + ylab('log of leaf area')+
  geom_abline(intercept=0, slope=1, col='red')+ 
  theme_classic()
ggplotly(p)
```

### Leaf Shape

```{r}
#how many unique shape names
distinct_shape <- unique(lwa_subset$leaf_shape)

#creating a folder path and directory
folder_path <- '/Users/ayamiller/Desktop/UNSW/term2/BEES3041/Austraits_Project/LeafShape'

dir.create(folder_path, showWarnings = FALSE)

#For loop to create a plot per leaf shape and save it to folder 
for(shape in distinct_shape){ 
  p<-ggplot(lwa_subset, aes(LxW, leaf_area))+ 
    geom_point()+ 
    ggtitle(paste('Area vs. LxW +',shape))+ 
    scale_x_log10()+ scale_y_log10()+ 
    xlab('log of leaf length x leaf width') +
    ylab('log of leaf area')+ 
    theme_classic()+ 
    geom_abline(intercept=0, slope=1, col='red')+ 
    geom_point(data=lwa_subset %>% filter(leaf_shape==shape), col='orange')
  
file_name <- paste0(folder_path, '/', shape, '_plot.png') 
ggsave(file_name, p, width=6, height=4) }

```

## Calculating and plotting importance

```{r}
#Create data frame with AusTraits.  
trait_data <- austraits$traits
#Create a column (vector) that contains all taxa that have leaf area values.
species_vector <- trait_data %>%
  filter(trait_name == "leaf_area") %>%
  select(taxon_name)%>%
  distinct()
#Turn this taxa vector into a list of taxa. This is because different parts of the code need lists, and other parts need vectors. 
species_list <- unique(species_vector$taxon_name)

#Create a data frame that calculates the number of species that have a value for each trait- as a measurement of trait coverage. Then select the top 15 highest coverage traits. 
top_traits <- trait_data %>% 
  count(taxon_name, trait_name) %>% 
  count(trait_name) %>%
  top_n(15, n)

##Leaf Shape and Family Data have different formats. The dataframes need to be created seperately. 

#Creating Family data frame. 
taxa <- austraits$taxa
taxa <- taxa %>% select(taxon_name, family)

#Creating Leaf Shape data frame. Making leaf_shape values classed as a character so that spaces between leaf shape types could be substituted for an underscore. This was needed so it would run in ranger. 
leaf_shape_data <- trait_data %>%
  filter(trait_name == "leaf_shape") %>%
  select(taxon_name, trait_name, value) %>%
  mutate(value = as.character(value))%>%
  mutate(value = gsub("-", "_", value))
leaf_shape_data <- separate_rows(leaf_shape_data, value, sep = " ")


#Create a dataset with categorical variables as factors so that they can be run through ranger.
factor_model_dataset <- trait_data %>% 
  filter(taxon_name %in% species_list)%>%
  filter(is.na(life_stage) | !(life_stage %in% c("seedling", "sapling")))%>%
  filter(is.na(replicates) | !(replicates %in% "leaflets")) %>%
  filter(trait_name %in% top_traits$trait_name | trait_name == "leaf_area")%>%
  select(trait_name, taxon_name, value) %>%
  mutate(value_type = ifelse(grepl("\\d", value), "numeric", "character")) %>%
  filter(!(trait_name %in% c("flowering_time", "leaf_shape")))

#Join Leaf Shape onto this data set. 
leaf_shape_data <- leaf_shape_data %>% mutate(value_type = "character")
#Bind the Leaf shape dataset and categorical factor dataset together. 
factor_model_dataset <- rbind(factor_model_dataset, leaf_shape_data)

#Create a data frame with key numeric traits, making sure values are registered as numeric and then pivoting the data frame wider. This creates a data frame with indivdiuals traits as columns. 
num_traits <- factor_model_dataset %>% 
  filter(value_type == "numeric")%>%
  group_by(taxon_name, trait_name) %>%
  summarise(compiled_value = mean(as.numeric(value)))%>%
  mutate(compiled_value = log(compiled_value)) %>%
    select(taxon_name, trait_name, compiled_value) %>%
  pivot_wider(names_from = trait_name, values_from = compiled_value)

#Creates a wide data frame of the top 15 traits. 
factor_model_dataset <- factor_model_dataset %>%
  filter(value_type == "character") %>%
  group_by(taxon_name, trait_name, value) %>%
  mutate(compiled_value = n()) %>%
  ungroup()%>%
  distinct() %>%
  group_by(taxon_name, trait_name)%>%
  mutate(max_compiled_value = sum(compiled_value == max(compiled_value)))%>%
  slice(which.max(compiled_value))%>%
  mutate(compiled_value = value) %>%
  ungroup()%>%
  select(taxon_name, trait_name, compiled_value) %>%
  pivot_wider(names_from = trait_name, values_from = compiled_value)%>%
  left_join(num_traits, by = "taxon_name")%>% 
  left_join(taxa, by = "taxon_name")

#We wanted to test how the R2 and RMSE would be affected if we used the same taxa for model comparison
factor_model_dataset <- factor_model_dataset %>%
  filter(!(is.na(leaf_length))
         &!(is.na(leaf_width)) 
         &!(is.na(plant_height))
         &!(is.na(plant_growth_form))
         &!(is.na(family))
         &!(is.na(leaf_shape))
         &!(is.na(woodiness_detailed))
         &!(is.na(life_history)))

#need to remove taxon_name column for the proper format in ranger
factor_model_dataset <- factor_model_dataset %>%
  select(-taxon_name)

#Takes the traits data frame and removes all N/A values the only species included are those that hold values for each of the top 15 traits. 
factor_model_dataset_nona <- factor_model_dataset %>% na.omit()

##Functions to create dataframes for models that include combinations of the most important traits and leaf area.

#Create a function to calculate the feature importance of a random forest model. 
test_importance <- function(model_data){
  ranger_model <- ranger(data = model_data , formula = leaf_area~., importance = 'impurity')
  importance <- importance(ranger_model)
  importance <- importance %>% as.data.frame()
  importance_table <- data.frame(
    feature_importance = importance$.,
    variables = rownames(importance)) 
  return(importance_table)}

#Create a function to graph importance.  
graph_importance <- function(importance_table, top_include){
  importance_graph <- importance_table %>%
    top_n(top_include, feature_importance) %>%
    mutate(variables = gsub("_", " ", variables))
  feature_importance_plot <- 
    ggplot(data = importance_graph, 
           aes(x = reorder(variables, feature_importance),
               y = feature_importance))+
    geom_bar(stat = 'identity')+
    coord_flip()+
    xlab("Predictor Variables")+
    ylab("Feature Importance")+
    theme_classic()
  return(feature_importance_plot)}

#Create a function to create dataframes which include the n most important variables
create_important_model_dataframes <- function(importance_table, importance_limit, full_dataset){
  important_traits <- importance_table %>%
    top_n(importance_limit, feature_importance)
  top_colnames <- unique(important_traits$variables)
  new_dataframe <- full_dataset %>% 
    select(leaf_area, all_of(top_colnames))%>%
    na.omit()
  return(new_dataframe)}

#Create a function to create dataframes for each variable in the importance table and leaf area. 
create_single_variable_model_dataframes <- function(importance_table, row_selection, full_dataset){
  selected_trait <- importance_table %>% arrange(desc(feature_importance))
  selected_trait <- importance_table[row_selection, ]
  selected_trait <- selected_trait$variable
  new_dataframe <- full_dataset %>% 
    select(leaf_area, all_of(selected_trait))%>%
    na.omit()}

#Create a function to create dataframes for each variable in the importance table, leaf length, leaf width and leaf area. 
create_single_variable_plus_dimensions_model_dataframes <- function(importance_table, row_selection, full_dataset){
    selected_trait <- importance_table %>% arrange(desc(feature_importance))
  selected_trait <- importance_table[row_selection, ]
  selected_trait <- selected_trait$variable
  new_dataframe <- full_dataset %>% 
    select(leaf_area, leaf_length, leaf_width, all_of(selected_trait))%>%
    na.omit()}

## Now that we have all the functions ready, we can use these to test feature importance. 

#Running a function to calculate the importance of the top 15 variables. 
set.seed(234)
importance <- test_importance(factor_model_dataset_nona)
#Graphing the importance. 
importance_plot <- graph_importance(importance, 15)
importance_plot <- importance_plot+
  theme(text = element_text(size = 30))
#importance_plot #plot importance in r studio
ggsave(file.path("plots", "importance.png"), importance_plot, height = 10, width = 10) #save importance to folder called "plots" 

#Plotting importance with species coverage 

#Create a data frame including taxon name, trait and family. 
taxa_coverage <- austraits$taxa %>%
  mutate(trait_name = "family") %>%
  select(taxon_name, trait_name)

#Creates a data frame with trait coverage and then categorise coverage into different groups- which is used to colour coordinate in the following importance plot. 
trait_coverage <- austraits$traits %>%
  select(taxon_name, trait_name) %>%
  filter(trait_name %in% top_traits$trait_name)%>%
  rbind(taxa_coverage)%>%
  distinct()%>%
  filter(!(taxon_name %in% species_list))%>%
  count(trait_name)%>%
  mutate(percent_current_Austraits_species = n/34060)%>%
  rename(variables = trait_name) %>%
  left_join(importance, by = "variables")%>%
  mutate(variables = gsub("_", " ", variables))%>%
  mutate(coverage = case_when(
    percent_current_Austraits_species < 0.50 ~ ">35%",
    percent_current_Austraits_species >= 0.50 & percent_current_Austraits_species < 0.65 ~ ">50%",
    percent_current_Austraits_species >= 0.65 & percent_current_Austraits_species < 0.80 ~ ">65%",
    percent_current_Austraits_species >= 0.80 ~ ">80%")) %>%
  na.omit()

#Added breaks into the coverage to ensure the defined thresholds plot in the graph. 
breaks <- seq(35, 85, by = 15)

#Creates an importance plot that captures coverage with a colour scale.
plot_important_traits <- 
  ggplot(trait_coverage, 
         aes(x = reorder(variables, feature_importance), 
             y = feature_importance,
             fill = coverage))+
  geom_bar(stat = 'identity')+
  coord_flip()+
  xlab("Predictor Variables")+
  ylab("Feature Importance")+
  theme_classic()+
  theme(text = element_text(size = 13))+
  scale_fill_manual(values = c(">35%" = "#A1D99B", 
                               ">50%" = "#74C476",
                               ">65%" = "#238B45",
                               ">80%" = "#005A32"))+
  labs(fill = "Coverage")

#plots important traits in r studio
plot_important_traits 
ggsave(file.path("plots", "importance_coloured_by_coverage.png"), plot_important_traits, height = 8, width = 12)
```

# Predictive Model Creation

## Model Creation using varying combinations of top 15 importance traits.

```{r}
#Run a loop to create a list containing dataframes where variables are added in order of importance. 
important_factor_models <- list()
for (i in 1:15) {
  result <- create_important_model_dataframes(importance, i, factor_model_dataset)
  name <- paste0("important_traits_", i)
  important_factor_models[[name]] <- result}

#Run a loop to create a list containing dataframes with each important variable and leaf area 
single_variable_models <- list()
for(i in 1:15) {
  result <- create_single_variable_model_dataframes(importance, i, factor_model_dataset)
  name <- paste0("single_traits_", i)
  single_variable_models[[name]] <- result}

#Run a loop to create a list containing dataframes with each important variable, plus leaf dimension variables
single_variable_and_dimension_models <- list()
for(i in 3:15) {
  result <- create_single_variable_plus_dimensions_model_dataframes(importance, i, factor_model_dataset)
  name <- paste0("single_and_dimension_traits", i)
  single_variable_and_dimension_models[[name]] <- result}

#Other Combinations of Variables to test
combinations_list <- list(leaf_dimensions_height_growth_family_shape =
                            c("leaf_length", 
                           "leaf_width", 
                           "plant_height", 
                           "plant_growth_form",
                           "family",
                           "leaf_shape"),
                          leaf_dimensions_height_growth_family_shape_woodiness =
                            c("leaf_length", 
                           "leaf_width", 
                           "plant_height", 
                           "plant_growth_form",
                           "family",
                           "leaf_shape",
                           "woodiness_detailed"),
                          growth_woodiness_life =
                            c("plant_growth_form",
                              "woodiness_detailed",
                              "life_history"),
                          growth_woodiness_life_family_shape =
                            c("plant_growth_form",
                              "woodiness_detailed",
                              "life_history",
                              "family",
                              "leaf_shape"),
                          leaf_dimensions_height_family =
                            c("leaf_width",
                              "leaf_length",
                              "plant_height",
                              "family"),
                          leaf_dimensions_height_leaf_shape =
                            c("leaf_length",
                              "leaf_width",
                              "plant_height",
                              "leaf_shape"))

other_models <- list()
for (i in seq_along(combinations_list)){
selected_trait <- combinations_list[[i]]
new_data <- factor_model_dataset %>% 
  select(leaf_area, all_of(selected_trait))%>% 
  na.omit()
other_models[[i]]<- new_data}

#Join the model lists together.
my_model_data <- c(important_factor_models, single_variable_models, single_variable_and_dimension_models, other_models)

#Create a function that renames the columns and trait values into a format that is readable for the ranger function (getting rid of spaces between words). 
rename_dataframes <- function(data_list) {
  for (i in seq_along(data_list)) {
    col_names <- colnames(data_list[[i]])
    old_name <- names(data_list)[i]
    new_name <- paste(col_names, collapse = "_")
    new_name <- paste(old_name, new_name)
    new_name <- gsub(" ", "_", new_name)
    names(data_list)[i] <- new_name}
  return(data_list)}
my_model_data <- rename_dataframes(my_model_data)


```

# Running Predictive Models

```{r}
##Models In Ranger

#Create a function to run a random forest model with ranger. Splitting data into 75% training and 25% testing. 
#Intended to run in a loop that will produce model statistics for all datasets.
#Will return plots of predicted versus observed leaf area.
run_ranger_model <- function(data, data_name, formula_string, seed_num, text_position, model_stats_data, ...){
  npoints <- nrow(data)
  set.seed(seed_num)
  train_ids <- sample(npoints, 3/4*npoints) #randomly sample 3/4 of the points 
  train <- data %>% slice(train_ids)
  test <- data %>% slice(-train_ids)
  relationship <- as.formula(formula_string)
  set.seed(seed_num)
  ranger_model <- ranger(relationship, 
                  data = train)

  #Create a function that returns the predicted values obtained from the model. 
  pred <- function(fit, data) predict(fit, data = data)$prediction
  data_pred <- test %>% 
    mutate(predicted = pred(ranger_model, test))
  model_stats <- data_pred %>%
    summarise(r2 = cor(leaf_area, predicted)^2,
            RMSE = sqrt(sum((leaf_area - predicted)^2)/n()))%>%
    ungroup()%>%
    mutate(
      stats_text = paste0("RMSE = ", format(RMSE, digits=2), ", R2 =", format(r2, digits=2)),
      model_name = data_name)
  model_statistics <- rbind(model_stats_data, model_stats)
  assign("model_statistics", model_statistics, envir = .GlobalEnv)
  
  
  #This plots the observed vs predicted leaf area on a plot. 
  model_plot <- data_pred %>%
    ggplot(aes(leaf_area, predicted)) +
    geom_point(col="darkgrey") +
    geom_abline(intercept = 0, slope=1, linetype="dashed") +
    geom_text(data = model_stats, aes(0, text_position, label = stats_text), hjust=0, col="red") +
    labs(x="Observed Leaf Area", y="Predicted Leaf Area")+ 
    theme_classic()
  return(model_plot)}

#This defines the form different model statics are in so that it can be used in future functions without having to redefine them each time.}
model_statistics <- data.frame(
  r2 = as.numeric(1),
  RMSE = as.numeric(1),
  stats_text = "a",
  model_name = "a",
  stringsAsFactors = FALSE)
formula_str <- "leaf_area ~ ."

#Creates a function that allows you to run random forest on a list of data sets. 
run_model_on_list <- function(data, model_name) {
  model_plot <- run_ranger_model(
    data = data,
    data_name = model_name,
    formula_string = formula_str,
    seed_num = 1452,
    text_position = 15,
    model_stats_data = model_statistics)
    model_plot}
#applies the function run_model_on_list to all dataframes contained within the my_model_data list
my_model_plots <- mapply(run_model_on_list, my_model_data, names(my_model_data), SIMPLIFY = FALSE)

#Uses a loop to save plots of all models
for (plot_name in names(my_model_plots)) {
  plot_obj <- my_model_plots[[plot_name]]
  file_path <- file.path("plots", paste0(plot_name, ".png"))
  ggsave(filename = file_path, plot = plot_obj, width = 6, height = 4)}

#Uses a loop to print plots of all models
for(plot_name in names(my_model_plots)){
  plot <- my_model_plots[[plot_name]]
  plot <- plot +
      labs(title = plot_name)
  print(plot)}
```

# Model Comparisons

## Creating comparative box plots to assess differences in RMSE as the number of variables within the model increases.

```{r}
set.seed(123)
#produces a vector of random numbers that can ran in a loop to set new seeds for different testing and training splits. 
#Here 100 seeds will be tried.
seed_numbers <- sample(1:1000, 100, replace = FALSE) 

#create function to run in a loop to produce model statistics for multiple models.
run_model_on_list_with_seed <- function(data, data_name, seed_num, ...){
  npoints <- nrow(data)
  set.seed(seed_num)
  train_ids <- sample(npoints, 3/4*npoints) #randomly sample 3/4 of the points 
  train <- data %>% slice(train_ids)
  test <- data %>% slice(-train_ids)
  relationship <- as.formula("leaf_area ~ .")
  set.seed(seed_num)
  ranger_model <- ranger(relationship, 
                  data = train)
  pred <- function(fit, data) predict(fit, data = data)$prediction
  data_pred <- test %>% 
    mutate(predicted = pred(ranger_model, test))
  model_stats <- data_pred %>%
    summarise(r2 = cor(leaf_area, predicted)^2,
            RMSE = sqrt(sum((leaf_area - predicted)^2)/n()))%>%
    ungroup()%>%
    mutate(
      stats_text = paste0("RMSE = ", format(RMSE, digits=2), ", R2 =", format(r2, digits=2)),
      model_name = data_name)
  model_statistics <- rbind(model_statistics, model_stats)
  return(model_statistics)}

#Run a loop to produce the statistics for each combination of variables that we are interested in testing
#this will take some computation time. Use a short seed_numbers for quicker computation.
#Current Iteration can be printed to check progress of the loop if desired.
#current_iteration <- 0
data_names <- names(my_model_data)
for (i in seed_numbers) {
  for (data_name in data_names) {
    data <- my_model_data[[data_name]]
    #current_iteration <- current_iteration + 1
    #cat("Current Iteration:", current_iteration, "\n")
    run_model_on_list_with_seed(data=data, data_name = data_name, seed_num = i)}}

#get means for model statistics
summary_statistics <- model_statistics %>% 
  select(model_name, r2, RMSE)%>%
  group_by(model_name)%>%
  summarise(r2 = mean(r2),
            RSME = mean(RMSE))

#Create comparitive boxplots of RMSE for the models with the top 15 importance.
importance <- importance %>% mutate(number_of_dv = rank(feature_importance)) #create ranks so that boxes can be plot in order
important_models <- model_statistics %>% 
  filter(grepl("important", model_name))%>%
  mutate(char_count = nchar(model_name),
         number_of_dv = dense_rank(char_count))%>%
  arrange(number_of_dv) %>% 
  left_join(importance, by = "number_of_dv") %>%
  mutate(variables = gsub("_", " ", variables)) %>%
  arrange(number_of_dv)

variable_inclusion <- ggplot(important_models, aes(y = RMSE, x = as.factor(number_of_dv)))+
  geom_boxplot(fill = "grey") +
  xlab("Number of variables Included")+
  theme_classic()+
  theme(text = element_text(size = 30))
#variable_inclusion #Print plot
ggsave(file.path("plots", "variable_inclusion3.png"), variable_inclusion, height = 10, width = 12) #save plot
```
